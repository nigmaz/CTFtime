from Crypto.Cipher import ARC4
from base64 import *

code = [
    (1, 0, 3435973748),
    (1, 1, 3435973704),
    (1, 2, 3435973691),
    (2, 136, 3435930753),
    (3, 111, 1868116835),
    (2, 132, 3435921665),
    (2, 10, 3435966261),
    (1, 208, 3435973683),
    (3, 15, 1987595620),
    (4, 18, 447815901),
    (1, 262, 3435973644),
    (3, 232, 893535338),
    (2, 29, 3435930022),
    (2, 31, 3435956926),
    (1, 33, 3435973708),
    (2, 34, 3435925030),
    (1, 36, 3435973685),
    (1, 93, 3435973691),
    (3, 43, 1966687594),
    (4, 22, 233652104),
    (3, 235, 2052469610),
    (2, 50, 3435966261),
    (2, 48, 3435933611),
    (2, 8, 3435935361),
    (3, 52, 1969450090),
    (1, 55, 3435973632),
    (2, 56, 3435936805),
    (3, 83, 1733445193),
    (1, 62, 3435973665),
    (1, 63, 3435973716),
    (1, 146, 3435973687),
    (1, 134, 3435973748),
    (4, 265, 335361728),
    (1, 74, 3435973632),
    (1, 269, 3435973714),
    (4, 77, 1136278977),
    (3, 284, 1870082660),
    (4, 58, 212890573),
    (4, 86, 112817101),
    (3, 90, 2037199441),
    (4, 271, 279852747),
    (1, 94, 3435973693),
    (2, 95, 3435929857),
    (4, 104, 112535432),
    (1, 186, 3435973700),
    (4, 154, 112868060),
    (3, 108, 1833584201),
    (4, 4, 1135501960),
    (4, 114, 251470017),
    (2, 199, 3435955773),
    (1, 122, 3435973675),
    (4, 123, 230172552),
    (1, 198, 3435973646),
    (1, 131, 3435973675),
    (1, 3, 3435973633),
    (4, 147, 331096968),
    (4, 169, 1135753096),
    (3, 12, 1131235162),
    (4, 138, 297547470),
    (4, 142, 297563099),
    (4, 175, 179644369),
    (2, 68, 3435963685),
    (1, 151, 3435973687),
    (2, 152, 3435933441),
    (4, 97, 50150620),
    (1, 158, 3435973714),
    (4, 159, 989691355),
    (4, 70, 397485771),
    (1, 167, 3435973683),
    (1, 47, 3435973632),
    (1, 135, 3435973704),
    (1, 173, 3435973683),
    (1, 174, 3435973710),
    (4, 201, 16590535),
    (2, 179, 3435962658),
    (1, 181, 3435973632),
    (4, 182, 1135099089),
    (3, 101, 1935225681),
    (1, 187, 3435973687),
    (1, 188, 3435973681),
    (4, 210, 212431836),
    (3, 191, 943871066),
    (2, 194, 3435929985),
    (1, 218, 3435973710),
    (4, 127, 397684937),
    (4, 118, 263725517),
    (4, 251, 296580045),
    (2, 205, 3435931302),
    (1, 207, 3435973632),
    (2, 75, 3435932709),
    (1, 209, 3435973681),
    (2, 189, 3435930275),
    (3, 275, 2037204809),
    (2, 196, 3435963430),
    (3, 239, 1819101034),
    (4, 220, 230454221),
    (1, 238, 3435973632),
    (4, 228, 212805574),
    (3, 26, 1429811546),
    (1, 46, 3435973685),
    (4, 224, 213808076),
    (1, 219, 3435973685),
    (2, 242, 3435963532),
    (4, 244, 129184392),
    (2, 37, 3435936167),
    (4, 64, 95696776),
    (1, 255, 3435973693),
    (3, 256, 1800811089),
    (3, 259, 1833588836),
    (4, 39, 1018830279),
    (2, 263, 3435922987),
    (4, 163, 16590535),
    (1, 168, 3435973710),
    (1, 270, 3435973693),
    (3, 248, 1733445193),
    (4, 214, 45428872),
    (2, 278, 3435955749),
    (4, 280, 217915612),
    (2, 81, 3435963048),
    (3, 287, 861301859),
    (3, 290, 1800034385),
    (1, 293, 3435973646),
]
dictionary = {1: "ENC_1", 2: "ENC_2", 3: "BASE64", 4: "RC4"}


def solve_enc_1(sample):
    if ((sample ^ 0x20) % 2) == 0:
        return ((sample ^ 0x20)) & 0xFF
    elif ((sample ^ 0x52) % 2) == 1:
        return ((sample ^ 0x52)) & 0xFF


def solve_enc_2(sample):
    def enc(inp):
        pack = ((inp & 0xFF) << 8) + ((inp >> 8) & 0xFF)
        for m in range(1, 6):
            pack = ((pack >> (16 - m)) | (pack << m)) ^ 0x1693
            pack &= 0xFFFF
        return pack

    for b in range(0xFFFF):
        if enc(b) == sample & 0xFFFF:
            return (b & 0xFF, b >> 8)


def solve_rc4(sample):
    key = b"susan"
    handle = ARC4.new(key)
    sample = sample.to_bytes(4, "little")
    return handle.decrypt(sample)


def custome_base64(sample):
    base64_custom = "ABDCEHGFIJKLUNOPYRTSMVWXQZajcdefohibkmlngpqrstuv4xzy8123w56709+0"
    base64_real = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
    translator = str.maketrans(base64_custom, base64_real)
    sample = sample.to_bytes(4, "little").decode()
    sample = sample.translate(translator)
    return b64decode(sample.encode())


flag = [""] * 1000
for inst, input_index, cons in code:
    print(f"{dictionary[inst]} input[{input_index}],{cons}", end="\n")
    if dictionary[inst] == "ENC_1":
        flag[input_index] = chr(solve_enc_1(cons))
    if dictionary[inst] == "ENC_2":
        result = solve_enc_2(cons)
        flag[input_index] = chr(result[0]) + chr(result[1])
    if dictionary[inst] == "RC4":
        result = solve_rc4(cons)
        flag[input_index] = result.decode()
    if dictionary[inst] == "BASE64":
        result = custome_base64(cons)
        flag[input_index] = result.decode()

print("".join(flag))
