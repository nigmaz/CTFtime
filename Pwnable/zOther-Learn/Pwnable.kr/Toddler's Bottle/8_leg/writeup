In , will set to (In arm mode pc will save current place + 8)key1mov r3, pc; mov r0, r3;r00x00008cdc + 8

In , will switch to thumb mode. will set to (In thumb mode pc will save the current place + 4)key2add r6, pc, #1; bx r6;mov r3, pc; adds r3, #4; mov r0, r3;r00x00008d04 + 4 + 4

In it will return , which is the return address.key3lr

---------------------------------------------------------------
0x00008d7c <+64>:	bl	0x8d20 <key3>
0x00008d80 <+68>:	mov	r3, r0
---------------------------------------------------------------

So the is .key30x00008d80

key1 + key2 + key3 equals 108400


We have to recover the correct values of key1 , key2 and key3 ; when we are done, we can compute their sum and find
the correct input that will make the program output the flag. Retrieving each of the keys requires understanding a certain quirk
or feature of how ARM operates.
• key1 requires understanding of how the pc register keeps track of execution. As mentioned before, for historical reasons,
when an instruction is being executed, pc points two instructions ahead. We can’t see the correct next instruction from
looking at the source - we’ll have to look at the generated assembly directly (thankfully, we have been given a disassembly
listing ready for reading). In the function key1 , the value of pc is copied to the register r3 in the instruction that has
address 0x00008cdc . At that time, pc is pointing two instructions ahead, at 0x00008ce4 . This value is later moved
to r0 and is the function return value.
• key2 requires understanding of ARM vs Thumb mode. The instruction at 0x00008cfc adds 1 to the current value of
pc and stores the result in r6 . So r6 now has the value 0x00008d04 + 1 . The next instruction of bx r6 therefore
jumps to the address 0x00008d04 (which happens to be the next instruction, anyway...) and switches execution to thumb
mode. When mov r3, pc is executed, pc is pointing 2 instructions ahead (as with key1 ) – but this time that’s 4
bytes ahead of the currently executed instruction, instead of 8, as thumb uses smaller instructions. 4 is added to the value
of r3 immediately after that, for a total value of 0x00008d0c . This is the function return value (which is also used as
the return address, by pushing it to the stack and popping it into pc ).
• key3 requires understanding of the register lr and its function. As mentioned earlier, lr serves a purpose similar to
55
that of the backed-up eip value on the stack in the stdcall calling convention popular with x86 code. This register keeps
the address of the next instruction for execution once the program returns; every function in the disassembly ends with
bx lr , which is roughly logically equivalent to x86’s ret . The key3 function uses the value of lr as its return value;
so the return value is the address of the next instruction to execute when key3 returns. This is the address 0x00008d80 .
The correct input to the program is the sum of the 3 key values, in decimal form ( 108400 ).
